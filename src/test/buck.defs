yarn_prerequisites = {
    '.yarn': '//:yarn_dir',
    '.pnp.js': '//:yarn_pnp',
    '.yarnrc.yml': '//:yarn_rc',
    'yarn.lock': '//:yarn_lock',
}

def yarn(
    name,
    srcs = ['**'],
    srcs_exclude = ['BUCK', 'node_modules'],
    deps = []):

    all_srcs = yarn_prerequisites.copy()
    all_srcs.update({k:k for k in glob(srcs, exclude = srcs_exclude) + ['package.json']})

    dep_args = [arg for dep in deps for arg in ['-n', '%s'  % dep, '-l', '$(location %s)' % dep]]

    genrule(
        name = 'deps',
        out = 'deps.txt',
        cmd = '$(exe //:write-deps) ' + ' '.join(dep_args) + ' > "${OUT}"'
    )

    genrule(
        name = 'pack',
        out = '%s.tgz' % name,
        srcs = all_srcs,
        cmd = 'yarn install && yarn pack --out "${OUT}"'
    )

    genrule(
        name = 'unpack',
        out = 'unpack',
        srcs = [':pack'],
        cmd = 'mkdir "${OUT}" && for src in ${SRCS}; do tar vxf "${src}" --directory "${OUT}" --strip-components 1; done | tee /dev/stderr',
        visibility = ['PUBLIC']
    )

    genrule(
        name = 'zip',
        out = '%s.zip' % name,
        srcs = [':unpack'],
        cmd = 'for src in ${SRCS}; do cd "${src}" && zip -r "${OUT}"; done; unzip -t ${OUT} > /dev/stderr'
    )

def vue(
    name,
    srcs = ['**'],
    srcs_exclude = ['BUCK', 'node_modules'],
    deps = []):

    genrule(
        name = 'test',
        out = 'test.log',
        srcs = all_srcs,
        cmd = 'yarn test > ${OUT}',
    )

    genrule(
        name = 'lint',
        out = 'lint.log',
        srcs = all_srcs,
        cmd = 'yarn lint > ${OUT}',
    )

    genrule(
        name = 'build',
        out = 'dist',
        tests = [':lint', ':test'],
        srcs = all_srcs,
        cmd = 'exec >&2; set -x; ls -lA "${SRCDIR}"; mkdir "${OUT}"; CACHE_DIR="${TMP}" yarn build --dest "${OUT}"'
    )
